{"version":3,"sources":["components/SearchInput.tsx","components/Logo.tsx","components/CategoriesList.tsx","components/StockPriceChange.tsx","components/StockCard.tsx","components/StocksList.tsx","components/StockFundamentals.tsx","App.tsx","features/counter/counterSlice.ts","app/store.ts","serviceWorker.ts","index.tsx"],"names":["generateStocksMatches","stocksList","regexp","i","length","test","symbol","SearchInput","onAddStock","useState","searchValue","setSearchValue","setStocksList","isStocksLoaded","setIsStocksLoaded","isFocused","setIsFocused","foundStocks","setFoundStocks","blurTimeout","setBlurTimeout","searchInput","useRef","foundStocksDiv","history","useHistory","useEffect","matchGenerator","RegExp","matchesArray","result","next","done","push","value","inputRect","current","getBoundingClientRect","foundStocksRect","foundStocksStyle","top","bottom","left","width","className","type","ref","onFocus","e","clearTimeout","fetchSupportedStocksList","then","onBlur","setTimeout","onChange","target","style","map","stock","onClick","tagName","description","focus","console","log","Logo","CategoriesList","categories","onAddCategory","onSelectCategory","selectedCategory","isAddingCategory","setIsAddingCategory","newCategoryInputValue","setNewCategoryInputValue","newCategoryInput","useParams","toggleIsAddingCategory","disabled","categoryName","backgroundColor","onKeyDown","key","blur","StockPriceChange","stockPrices","prevClosePriceDiff","c","pc","prevClosePriceDiffPercent","prevClosePriceDiffStyle","color","toFixed","StockCard","ticker","onRemoveStock","isLoaded","setIsLoaded","error","setError","stockProfile","setStockProfile","setStockPrices","Promise","all","fetchStockProfile","fetchStockPrices","results","message","name","StocksList","categoriesData","to","StockFundamentals","params","initialCategories","apiKey","fetch","response","json","App","categoriesDataList","setCategoriesDataList","selectedCategoryName","setSelectedCategoryName","includes","Object","keys","category","path","newCategoriesDataList","filter","elem","counterSlice","createSlice","initialState","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","store","configureStore","reducer","counter","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.90a8f457.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\r\nimport { useHistory } from 'react-router-dom';\r\nimport { fetchSupportedStocksList } from '../App';\r\nimport '../styles/SearchInput.scss'\r\n\r\n interface SearchInputProps {\r\n    onAddStock: (ticker: string) => void\r\n }\r\n\r\n interface StockData {\r\n         description: string ,\r\n         displaySymbol: string,\r\n         symbol: string,\r\n         type: string,\r\n         currency: string\r\n }\r\n\r\n function* generateStocksMatches(stocksList: StockData[], regexp: RegExp) {\r\n     for (let i = 0; i < stocksList.length; i++) {\r\n         if (regexp.test(stocksList[i].symbol)) {\r\n             yield stocksList[i];\r\n         }\r\n     }\r\n}\r\n\r\nexport const SearchInput: React.FC<SearchInputProps> = ({ onAddStock }) => {\r\n\r\n    const [searchValue, setSearchValue] = useState('');\r\n    const [stocksList, setStocksList] = useState([]);\r\n    const [isStocksLoaded, setIsStocksLoaded] = useState(false);\r\n    const [isFocused, setIsFocused] = useState(false);\r\n    const [foundStocks, setFoundStocks] = useState<StockData[]>([]);\r\n    const [blurTimeout, setBlurTimeout] = useState<NodeJS.Timeout | null>(null);\r\n\r\n    const searchInput = useRef<HTMLInputElement>(null);\r\n    const foundStocksDiv = useRef<HTMLDivElement>(null);\r\n\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        if (isStocksLoaded && searchValue != '') {\r\n            let matchGenerator = generateStocksMatches(stocksList, new RegExp(`^${searchValue}`, 'i'))\r\n            let matchesArray: StockData[] = [];\r\n            for(let i = 0; i < 5; i++) {\r\n                let result = matchGenerator.next();\r\n                if (result.done) {\r\n                    break;\r\n                }\r\n                matchesArray.push(result.value);\r\n            }\r\n            setFoundStocks(matchesArray);\r\n        }\r\n    }, [searchValue, isStocksLoaded, isFocused])\r\n\r\n    const fetchStocks = () => {\r\n        if(!isStocksLoaded) {\r\n            fetchSupportedStocksList()\r\n                .then(result => {\r\n                    setStocksList(result);\r\n                    setIsStocksLoaded(true)\r\n                })\r\n        }\r\n    }\r\n\r\n    const inputRect = searchInput.current?.getBoundingClientRect();\r\n    const foundStocksRect = foundStocksDiv.current?.getBoundingClientRect()\r\n\r\n    const foundStocksStyle: React.CSSProperties = {\r\n        top: inputRect?.bottom as number + 3,\r\n        left: (foundStocksRect?.width as number - (inputRect?.width  as number)) / 2\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"SearchInput\">\r\n            <input \r\n                type=\"text\" \r\n                ref={searchInput}\r\n                onFocus={e => {\r\n                    if (blurTimeout) {\r\n                        clearTimeout(blurTimeout);\r\n                        setBlurTimeout(null);\r\n                    }\r\n                    fetchStocks();\r\n                    setIsFocused(true);\r\n                }} \r\n                onBlur={e => {\r\n                    setBlurTimeout(setTimeout(() => setIsFocused(false), 300));\r\n                }}\r\n                value={searchValue} \r\n                onChange={e => setSearchValue(e.target.value)}/>\r\n            {isFocused && foundStocks.length > 0 ?\r\n                <div className=\"found-stocks\" style={foundStocksStyle}>\r\n                    {foundStocks.map(stock => (\r\n                        <div \r\n                            key={stock.symbol} \r\n                            onClick={e => {\r\n                                if ((e.target as HTMLElement).tagName != 'BUTTON') {\r\n                                    history.push(`/stock/${stock.symbol}`)\r\n                                }\r\n                            }}>\r\n                            <span>{stock.symbol}</span> \r\n                            <span className='found-stock-description'>{stock.description}</span> \r\n                            <button \r\n                                type='button' \r\n                                onClick={() => {\r\n                                    searchInput.current?.focus();\r\n                                    onAddStock(stock.symbol);\r\n                                    console.log('clicked');\r\n                                }}\r\n                                className='add-stock-btn'>Add to checklist</button>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            : null\r\n            }\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport '../styles/Logo.scss'\r\n\r\nexport const Logo: React.FC = () => {\r\n    return (\r\n        <div className='Logo'>\r\n            <h1>Checklist</h1>\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useRef, useState } from 'react'\r\nimport { Link, useHistory, useParams } from 'react-router-dom'\r\nimport '../styles/CategoriesList.scss'\r\nimport FolderOpenIcon from '@material-ui/icons/FolderOpen';\r\n\r\ninterface CategoriesListProps {\r\n    categories: string[],\r\n    onAddCategory: (categoryName: string) => void,\r\n    onSelectCategory: (category: string) => void,\r\n    selectedCategory: string\r\n}\r\n\r\nexport const CategoriesList: React.FC<CategoriesListProps> = ({ categories, onAddCategory, onSelectCategory, selectedCategory }) => {\r\n\r\n    const [isAddingCategory, setIsAddingCategory] = useState(false);\r\n    const [newCategoryInputValue, setNewCategoryInputValue] = useState('');\r\n\r\n    const newCategoryInput = useRef<HTMLInputElement>(null);\r\n\r\n    const history = useHistory();\r\n    const params = useParams<{categoryName: string}>();\r\n\r\n    useEffect(() => {\r\n        if (isAddingCategory && newCategoryInput && newCategoryInput.current) {\r\n            newCategoryInput.current.focus();\r\n        }\r\n    }, [isAddingCategory])\r\n\r\n    const toggleIsAddingCategory = () => {\r\n        setIsAddingCategory(!isAddingCategory);\r\n    } \r\n\r\n    console.log(selectedCategory)\r\n\r\n    return (\r\n        <div className='CategoriesList'>\r\n            <div className='category-header'>Categories \r\n                <button \r\n                    disabled={isAddingCategory} \r\n                    className='add-category-btn' \r\n                    onClick={toggleIsAddingCategory}>\r\n                    +\r\n                </button>\r\n            </div>\r\n            {categories.map(\r\n                categoryName => \r\n                    <div \r\n                        className=\"category-item\" \r\n                        key={categoryName}\r\n                        style={categoryName === selectedCategory ? {backgroundColor: 'rgba(0, 0, 0, .25)'} : {}}\r\n                        onClick={\r\n                            e => {\r\n                                onSelectCategory(categoryName);\r\n                                history.push(`/categories/${categoryName}`)\r\n                            }\r\n                        }>\r\n                            <FolderOpenIcon /> \r\n                            <span> {categoryName}</span>\r\n                    </div>\r\n            )}\r\n            { isAddingCategory && <div className=''>\r\n                    <input \r\n                        onChange={e => setNewCategoryInputValue(e.target.value)} \r\n                        onBlur={() => {\r\n                            onAddCategory(newCategoryInputValue);\r\n                            toggleIsAddingCategory();\r\n                            setNewCategoryInputValue('');\r\n                        }}\r\n                        onKeyDown={(e) => {\r\n                            if (e.key === 'Enter') {\r\n                                (e.target as HTMLInputElement).blur();\r\n                            }\r\n                        }}\r\n                        ref={newCategoryInput} \r\n                        value={newCategoryInputValue}\r\n                        type='text'></input>\r\n                </div>}\r\n        </div>\r\n    );\r\n}","import React from 'react'\r\n\r\ninterface StockPriceChangeProps {\r\n    stockPrices: { [propName: string]: number }\r\n}\r\n\r\nexport const StockPriceChange: React.FC<StockPriceChangeProps> = ({ stockPrices }) => {\r\n\r\n    const prevClosePriceDiff: number = stockPrices.c - stockPrices.pc\r\n    const prevClosePriceDiffPercent: number = prevClosePriceDiff / stockPrices.c * 100;\r\n    const prevClosePriceDiffStyle: React.CSSProperties = {\r\n        color: prevClosePriceDiff > 0 ? 'green' : 'red' \r\n    }\r\n\r\n    return (\r\n        <span className='StockPriceChange' style={prevClosePriceDiffStyle}>\r\n            {prevClosePriceDiff > 0 && '+'}{prevClosePriceDiff.toFixed(2)}\r\n            ({prevClosePriceDiffPercent > 0 && '+'}{prevClosePriceDiffPercent.toFixed(2)}%)\r\n        </span>\r\n    )\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { useHistory } from 'react-router-dom';\r\nimport { fetchStockPrices, fetchStockProfile } from '../App';\r\nimport '../styles/StockCard.scss'\r\nimport { StockPriceChange } from './StockPriceChange';\r\n\r\ninterface StockCardProps {\r\n    ticker: string,\r\n    onRemoveStock: (ticker: string) => void\r\n}\r\n\r\nexport const StockCard: React.FC<StockCardProps> = ({ ticker, onRemoveStock }) => {\r\n\r\n    const history = useHistory();\r\n    \r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [error, setError] = useState<Error | null>(null);\r\n    const [stockProfile, setStockProfile] = useState<{ [propName: string]: string }>({});\r\n    const [stockPrices, setStockPrices] = useState<{ [propName: string]: number }>({})\r\n\r\n    useEffect(() => {\r\n        Promise.all([fetchStockProfile(ticker), fetchStockPrices(ticker)])\r\n            .then(\r\n                results => {\r\n                    setStockProfile(results[0]);\r\n                    setStockPrices(results[1]);\r\n                    setIsLoaded(true)\r\n                },\r\n                error => {\r\n                    setError(error)\r\n                })\r\n    }, [])\r\n\r\n    if (error) {\r\n        return <div>{error.message}</div>\r\n    }\r\n    \r\n    if (!isLoaded) {\r\n        return <div>Loading...</div>\r\n    }\r\n\r\n    return (\r\n        <div \r\n            className='StockCard' \r\n            onClick={e => {\r\n                    if ((e.target as HTMLElement).tagName !== 'BUTTON') {\r\n                        history.push(`/stock/${ticker}`);\r\n                    }\r\n            }}>\r\n                <div className=\"big-ticker\">{ticker}</div>\r\n                <div className=\"full-stock-name\">\r\n                    {`Company name: ${stockProfile.name}`}\r\n                </div>\r\n                <div className=\"stock-price\">\r\n                    {`$${stockPrices?.c}`}\r\n                    <StockPriceChange stockPrices={stockPrices} />\r\n                </div>\r\n                <button type='button' onClick={e => onRemoveStock(ticker)}>X</button>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { Redirect, useParams } from 'react-router-dom'\r\nimport '../styles/StocksList.scss'\r\nimport { StockCard } from './StockCard';\r\n\r\ninterface StocksListProps { \r\n    categoriesData: {[categoryName: string]: string[]},\r\n    onRemoveStock: (ticker: string) => void\r\n}\r\n\r\nexport const StocksList: React.FC<StocksListProps> = ({ categoriesData, onRemoveStock }) => {\r\n\r\n    let { categoryName } = useParams<{ categoryName: string }>();\r\n    \r\n    return (\r\n        <div className=\"StocksList\">\r\n            {categoriesData[categoryName] ? \r\n                categoriesData[categoryName].map(stock => <StockCard onRemoveStock={onRemoveStock} key={stock} ticker={stock} />)\r\n                : <Redirect to='/noSuchCategory' /> \r\n            }\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { fetchStockPrices, fetchStockProfile } from '../App';\r\n\r\nimport '../styles/StockFundamentals.scss'\r\nimport { StockPriceChange } from './StockPriceChange';\r\n\r\nexport const StockFundamentals: React.FC = () => {\r\n\r\n    const params = useParams<{ ticker: string }>();\r\n    \r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [error, setError] = useState<Error | null>(null);\r\n    const [stockProfile, setStockProfile] = useState<{ [propName: string]: string }>({});\r\n    const [stockPrices, setStockPrices] = useState<{ [propName: string]: number }>({})\r\n\r\n    useEffect(() => {\r\n        Promise.all([fetchStockProfile(params.ticker), fetchStockPrices(params.ticker)])\r\n            .then(\r\n                results => {\r\n                    setIsLoaded(true);\r\n                    setStockProfile(results[0]);\r\n                    setStockPrices(results[1])},\r\n                error => {\r\n                    setError(error)\r\n                })\r\n    }, [params.ticker])\r\n\r\n\r\n    if (!isLoaded) {\r\n        return <p>Loading...</p>\r\n    }\r\n\r\n    if (error) {\r\n        return <p>{error.message}</p>\r\n    }\r\n\r\n    return (\r\n        <div className='StockFundamentals'>\r\n            <h2>\r\n                {stockProfile.name} ({stockProfile.ticker})\r\n            </h2>\r\n            <div className='price-section'>\r\n                <span className='current-price'>{stockPrices.c}</span>\r\n                <StockPriceChange stockPrices={stockPrices} />\r\n            </div>\r\n            <p>{stockProfile.description}</p>\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport { SearchInput } from './components/SearchInput';\r\nimport { Logo } from './components/Logo';\r\nimport { CategoriesList } from './components/CategoriesList';\r\nimport { StocksList } from './components/StocksList';\r\n\r\nimport './App.scss';\r\nimport { Redirect, Route, Switch, useParams } from 'react-router-dom';\r\nimport { StockFundamentals } from './components/StockFundamentals';\r\n\r\nlet initialCategories = {\r\n  'favorites': [\r\n    'AAPL',\r\n    'TSLA',\r\n    'AMZN',\r\n    'NFLX',\r\n    'FB'\r\n  ]\r\n}\r\n\r\nconst apiKey = 'sandbox_bup9l3f48v6sjkjisljg';\r\n\r\nfunction App() {\r\n\r\n  const [categoriesDataList, setCategoriesDataList] = useState<{[categoryName: string]: string[]}>(initialCategories);  \r\n  const [selectedCategoryName, setSelectedCategoryName] = useState<string>('favorites');\r\n\r\n  const params = useParams();\r\n\r\n  const onAddCategory = (categoryName: string) => {\r\n    if (categoryName !== '' && !categoriesDataList[categoryName])\r\n      setCategoriesDataList({\r\n        ...categoriesDataList,\r\n        [categoryName]: []\r\n      })\r\n  }\r\n\r\n  const onAddStock = (ticker: string) => {\r\n    if(!categoriesDataList[selectedCategoryName].includes(ticker)) {\r\n      setCategoriesDataList({\r\n        ...categoriesDataList,\r\n        [selectedCategoryName]: [...categoriesDataList[selectedCategoryName], ticker]\r\n      })\r\n    }\r\n  }\r\n\r\n  const onRemoveStock = (ticker: string) => {\r\n    let newCategoriesDataList = {\r\n      ...categoriesDataList\r\n    }\r\n    newCategoriesDataList[selectedCategoryName] = newCategoriesDataList[selectedCategoryName].filter(elem => elem != ticker)\r\n    setCategoriesDataList(newCategoriesDataList);\r\n  }\r\n\r\n  const onSelectCategory = (category: string) => {\r\n    setSelectedCategoryName(category);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"grid\">\r\n        <Logo />\r\n        <SearchInput \r\n          onAddStock={onAddStock}/>\r\n        <div className=\"scrollable-container\">\r\n          <CategoriesList \r\n            onAddCategory={onAddCategory} \r\n            categories={Object.keys(categoriesDataList)}\r\n            onSelectCategory={onSelectCategory}\r\n            selectedCategory={selectedCategoryName}/>\r\n        </div>\r\n        <div className=\"scrollable-container background-secondary\">\r\n          <Switch>\r\n            <Route path='/categories/:categoryName'>\r\n              <StocksList \r\n                categoriesData={categoriesDataList}\r\n                onRemoveStock={onRemoveStock}/>\r\n            </Route>\r\n            <Route path='/stock/:ticker'>\r\n              <StockFundamentals />\r\n            </Route>\r\n            <Redirect to='/categories/favorites' />\r\n          </Switch>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport const fetchStockProfile = (ticker: string) => {\r\n  return (\r\n    fetch('https://finnhub.io/api/v1/stock/profile?symbol=' + ticker + '&token=' + apiKey)\r\n      .then(response => response.json())\r\n  )\r\n}\r\n\r\nexport const fetchSupportedStocksList = () => {\r\n  return (\r\n    fetch('https://finnhub.io/api/v1/stock/symbol?exchange=US&token=' + apiKey)\r\n      .then(response => response.json())\r\n  )\r\n}\r\n\r\nexport const fetchStockPrices = (ticker: string) => {\r\n  return (\r\n    fetch('https://finnhub.io/api/v1/quote?symbol=' + ticker + '&token=' + apiKey)\r\n      .then(response => response.json())\r\n  )\r\n}\r\n\r\nexport default App;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { AppThunk, RootState } from '../../app/store';\r\n\r\ninterface CounterState {\r\n  value: number;\r\n}\r\n\r\nconst initialState: CounterState = {\r\n  value: 0,\r\n};\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    incrementByAmount: (state, action: PayloadAction<number>) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = (amount: number): AppThunk => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectCount = (state: RootState) => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter as Router } from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}